2025-01-14 21:19:04,116 - DEBUG - Starting new HTTP connection (1): host.docker.internal:11434
2025-01-14 21:19:04,131 - DEBUG - http://host.docker.internal:11434 "GET /api/tags HTTP/1.1" 200 None
2025-01-14 21:19:04,132 - INFO - Successfully connected to Ollama
2025-01-14 21:19:24,229 - INFO - Starting development for task: fais un script qui calcule la suite de fibo jusqua 20 000
2025-01-14 21:19:24,231 - INFO - Iteration 1/10
2025-01-14 21:19:24,233 - INFO - Sending request to Ollama...
2025-01-14 21:19:24,237 - DEBUG - Starting new HTTP connection (1): host.docker.internal:11434
2025-01-14 21:19:41,439 - DEBUG - http://host.docker.internal:11434 "POST /api/generate HTTP/1.1" 200 None
2025-01-14 21:19:41,449 - DEBUG - Raw response: {"model": "llama3.1:latest", "created_at": "2025-01-14T21:19:41.105772Z", "response": "{\n    \"code\": \"# Le code Python complet ici\\ndef calculer_suite_fibo(n):\\n    if n <= 0:\\n        return []\\n    elif n == 1:\\n        return [0]\\n    elif n == 2:\\n        return [0, 1]\\n    else:\\n        fibo = [0, 1]\\n        while len(fibo) < n:\\n            fibo.append(fibo[-1] + fibo[-2])\\n        return fibo\\nprint(calculer_suite_fibo(20_000))\",\n    \"tests\": \"# Les tests pytest complets ici\\nimport pytest\\ndef test_calculer_suite_fibo):\\n    assert calculer_suite_fibo(0) == [], 'Fonction doit retourner une liste vide pour n=0'\\n    assert calculer_suite_fibo(1) == [0], 'Fonction doit retourner [0] pour n=1'\\n    assert calculer_suite_fibo(2) == [0, 1], 'Fonction doit retourner [0, 1] pour n=2'\\n    assert len(calculer_suite_fibo(20_000)) <= 20_000, 'La fonction doit ne pas d\u00e9passer les 20 000 premiers chiffres de la suite de Fibonacci'\",\n    \"analysis\": \"Cette solution utilise une approche simple mais efficace pour calculer la suite de Fibonacci. Elle commence par v\u00e9rifier si n est inf\u00e9rieur ou \u00e9gal \u00e0 0, puis retourne une liste vide. Si n est \u00e9gal \u00e0 1 ou 2, elle retourne respectivement [0] et [0, 1]. Pour les valeurs sup\u00e9rieures \u00e0 2, elle utilise un boucle while pour calculer les prochains \u00e9l\u00e9ments de la suite. La fonction est ensuite test\u00e9e avec des cas de tests qui v\u00e9rifient sa validit\u00e9.\",\n    \"continue\": false\n}", "done": true, "done_reason": "stop", "context": [128009, 128006, 882, 128007, 271, 1737, 37622, 1744, 52895, 375, 324, 13325, 6335, 11, 1589, 8047, 6316, 6425, 5019, 20662, 259, 9011, 1557, 1473, 69, 2852, 653, 5429, 7930, 10241, 1130, 1208, 16578, 409, 16178, 78, 45907, 44932, 220, 508, 220, 931, 271, 57099, 90509, 9503, 964, 23761, 653, 31260, 4823, 9952, 20662, 6070, 4839, 68, 512, 517, 262, 330, 1889, 794, 5993, 2009, 2082, 13325, 3543, 49733, 59, 5145, 7643, 766, 263, 407, 4658, 74003, 262, 330, 24781, 794, 5993, 11876, 7177, 28864, 1946, 2641, 49733, 1734, 475, 28864, 59, 5145, 1296, 766, 263, 407, 4658, 74003, 262, 330, 35584, 794, 330, 70551, 49586, 409, 1208, 6425, 761, 262, 330, 9726, 794, 837, 92333, 198, 633, 45, 52152, 4256, 61017, 409, 1203, 36178, 6033, 47838, 3645, 425, 482, 73450, 5441, 514, 4823, 13, 128009, 128006, 78191, 128007, 271, 517, 262, 330, 1889, 794, 5993, 2009, 2082, 13325, 3543, 49733, 59, 5145, 5935, 261, 58339, 766, 29946, 1471, 90149, 77, 262, 422, 308, 2717, 220, 15, 7338, 77, 286, 471, 3132, 59, 77, 262, 4508, 308, 624, 220, 16, 7338, 77, 286, 471, 510, 15, 18444, 77, 262, 4508, 308, 624, 220, 17, 7338, 77, 286, 471, 510, 15, 11, 220, 16, 18444, 77, 262, 775, 7338, 77, 286, 16178, 78, 284, 510, 15, 11, 220, 16, 18444, 77, 286, 1418, 2479, 968, 29946, 8, 366, 308, 7338, 77, 310, 16178, 78, 2102, 968, 29946, 7764, 16, 60, 489, 16178, 78, 7764, 17, 2526, 59, 77, 286, 471, 16178, 78, 1734, 1374, 55571, 3395, 261, 58339, 766, 29946, 7, 508, 62, 931, 595, 761, 262, 330, 24781, 794, 5993, 11876, 7177, 28864, 1946, 2641, 49733, 1734, 475, 28864, 59, 5145, 1296, 24965, 3395, 261, 58339, 766, 29946, 90149, 77, 262, 2105, 5935, 261, 58339, 766, 29946, 7, 15, 8, 624, 10277, 364, 37, 263, 407, 42182, 54606, 1215, 6316, 34024, 23895, 5019, 308, 28, 15, 16154, 77, 262, 2105, 5935, 261, 58339, 766, 29946, 7, 16, 8, 624, 510, 15, 1145, 364, 37, 263, 407, 42182, 54606, 1215, 510, 15, 60, 5019, 308, 28, 16, 16154, 77, 262, 2105, 5935, 261, 58339, 766, 29946, 7, 17, 8, 624, 510, 15, 11, 220, 16, 1145, 364, 37, 263, 407, 42182, 54606, 1215, 510, 15, 11, 220, 16, 60, 5019, 308, 28, 17, 16154, 77, 262, 2105, 2479, 55571, 3395, 261, 58339, 766, 29946, 7, 508, 62, 931, 595, 2717, 220, 508, 62, 931, 11, 364, 8921, 34501, 42182, 841, 6502, 7591, 6519, 261, 3625, 220, 508, 220, 931, 6954, 4918, 84064, 417, 409, 1208, 16578, 409, 80783, 39430, 262, 330, 35584, 794, 330, 87278, 6425, 69152, 6316, 3057, 1557, 4382, 10071, 31914, 580, 5019, 5935, 261, 1208, 16578, 409, 80783, 13, 46408, 56445, 1370, 77680, 3125, 4502, 308, 1826, 4225, 57663, 6033, 4046, 16876, 3869, 220, 15, 11, 44829, 54606, 818, 6316, 34024, 23895, 13, 12095, 308, 1826, 4046, 16876, 3869, 220, 16, 6033, 220, 17, 11, 27549, 54606, 818, 5201, 91640, 510, 15, 60, 1880, 510, 15, 11, 220, 16, 948, 27058, 3625, 97035, 1043, 35285, 1439, 3869, 220, 17, 11, 27549, 69152, 653, 30870, 9326, 1418, 5019, 5935, 261, 3625, 463, 59458, 33013, 98942, 409, 1208, 16578, 13, 5034, 34501, 1826, 76826, 1296, 8047, 9952, 951, 4865, 409, 7177, 7930, 77680, 333, 1188, 829, 2764, 13109, 10560, 262, 330, 9726, 794, 905, 198, 92], "total_duration": 16860529791, "load_duration": 835459875, "prompt_eval_count": 140, "prompt_eval_duration": 2481000000, "eval_count": 417, "eval_duration": 13540000000}
2025-01-14 21:19:41,454 - INFO - Got response of length: 1344
2025-01-14 21:19:41,463 - INFO - Code saved to test_script.py
2025-01-14 21:19:41,467 - INFO - Code saved to tests.py
